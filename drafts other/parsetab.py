
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEleftPOWERrightUMINUSif else break function then in repeat print input include compile until to start end lt le gt ge ne eq and or PLUS MINUS TIMES DIVIDE POWER COMMA SEMI INTEGER FLOAT STRING ID NEWLINE LPAREN RPAREN ARGSprogram : statement\n            program : errorstatement : variable eq expr\n                 | variable eq relexpr\n                   statement : variable eq\n                    | variable error expr\n                    | variable error relexpr\n                    expr : expr PLUS expr\n            | expr MINUS expr\n            | expr TIMES expr\n            | expr DIVIDE expr\n            | expr POWER exprexpr : INTEGER\n            | FLOAT\n            expr : string\n    string : STRING\n    expr : variableexpr : LPAREN expr RPARENexpr : MINUS expr %prec UMINUSrelexpr : expr lt expr\n               | expr le expr\n               | expr gt expr\n               | expr ge expr\n               | expr eq expr\n               | expr ne exprrelexpr : LPAREN relexpr RPARENvariable : IDstatement : print expr\n                     \n    statement : input variable\n                | variable eq input string\n                | input\n    statement : if expr then\n            | if relexpr thenstatement : else  then\n            statement : else if expr then\n            | else if relexpr thenstatement : repeat until relexpr then\n                | repeat until expr then\n            \n    statement : function variable LPAREN args RPAREN then\n                | function variable LPAREN RPAREN then\n        \n    statement : function error LPAREN args RPAREN then\n                | function variable error args RPAREN then\n                | function variable LPAREN args error then\n                | function variable LPAREN error RPAREN then\n                | function error LPAREN RPAREN then\n                | function variable error RPAREN then\n                | function variable LPAREN error then\n    \n    statement : variable LPAREN call_args RPAREN\n                | variable LPAREN RPAREN\n    \n    statement : variable error call_args RPAREN\n                | variable LPAREN error RPAREN\n                | variable LPAREN call_args RPAREN statement\n                | variable LPAREN RPAREN statement\n                | variable error RPAREN\n\n    \n    call_args : call_args COMMA expr\n             |  expr\n    \n    args : args COMMA variable\n        | variable\n    statement : end'
    
_lr_action_items = {'error':([0,4,10,12,15,31,66,93,94,115,],[3,14,32,-27,42,67,96,-58,104,-57,]),'print':([0,41,72,],[5,5,5,]),'input':([0,13,41,72,],[6,35,6,6,]),'if':([0,8,41,72,],[7,29,7,7,]),'else':([0,41,72,],[8,8,8,]),'repeat':([0,41,72,],[9,9,9,]),'function':([0,41,72,],[10,10,10,]),'end':([0,41,72,],[11,11,11,]),'ID':([0,5,6,7,10,13,14,15,17,22,27,29,30,41,44,45,46,47,48,52,53,54,55,56,57,65,66,67,68,71,72,105,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'$end':([1,2,3,6,11,12,13,16,18,19,20,21,23,24,28,33,34,36,37,39,41,49,51,58,69,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,102,106,108,110,112,113,114,116,117,118,],[0,-1,-2,-31,-59,-27,-5,-28,-13,-14,-15,-17,-16,-29,-34,-3,-4,-6,-7,-54,-49,-19,-32,-33,-30,-50,-48,-53,-51,-8,-9,-10,-11,-12,-18,-20,-21,-22,-23,-24,-25,-26,-35,-36,-37,-38,-52,-40,-47,-46,-45,-39,-43,-44,-42,-41,]),'eq':([4,12,18,19,20,21,23,25,33,36,49,59,61,64,75,76,77,78,79,80,92,],[13,-27,-13,-14,-15,-17,-16,56,56,56,-19,56,56,56,-8,-9,-10,-11,-12,-18,56,]),'LPAREN':([4,5,7,12,13,14,15,17,22,27,29,30,31,32,44,45,46,47,48,52,53,54,55,56,57,65,71,],[15,22,27,-27,27,27,22,22,22,27,27,65,66,68,22,22,22,22,22,22,22,22,22,22,22,65,22,]),'INTEGER':([5,7,13,14,15,17,22,27,29,30,44,45,46,47,48,52,53,54,55,56,57,65,71,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'FLOAT':([5,7,13,14,15,17,22,27,29,30,44,45,46,47,48,52,53,54,55,56,57,65,71,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'MINUS':([5,7,12,13,14,15,16,17,18,19,20,21,22,23,25,27,29,30,33,36,43,44,45,46,47,48,49,50,52,53,54,55,56,57,59,61,64,65,71,75,76,77,78,79,80,81,82,83,84,85,86,92,101,],[17,17,-27,17,17,17,45,17,-13,-14,-15,-17,17,-16,45,17,17,17,45,45,45,17,17,17,17,17,-19,45,17,17,17,17,17,17,45,45,45,17,17,-8,-9,-10,-11,-12,-18,45,45,45,45,45,45,45,45,]),'STRING':([5,7,13,14,15,17,22,27,29,30,35,44,45,46,47,48,52,53,54,55,56,57,65,71,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'then':([8,12,18,19,20,21,23,25,26,49,61,62,63,64,75,76,77,78,79,80,81,82,83,84,85,86,87,95,96,98,100,103,104,107,109,111,],[28,-27,-13,-14,-15,-17,-16,51,58,-19,88,89,90,91,-8,-9,-10,-11,-12,-18,-20,-21,-22,-23,-24,-25,-26,106,108,110,112,113,114,116,117,118,]),'until':([9,],[30,]),'PLUS':([12,16,18,19,20,21,23,25,33,36,43,49,50,59,61,64,75,76,77,78,79,80,81,82,83,84,85,86,92,101,],[-27,44,-13,-14,-15,-17,-16,44,44,44,44,-19,44,44,44,44,-8,-9,-10,-11,-12,-18,44,44,44,44,44,44,44,44,]),'TIMES':([12,16,18,19,20,21,23,25,33,36,43,49,50,59,61,64,75,76,77,78,79,80,81,82,83,84,85,86,92,101,],[-27,46,-13,-14,-15,-17,-16,46,46,46,46,-19,46,46,46,46,46,46,-10,-11,-12,-18,46,46,46,46,46,46,46,46,]),'DIVIDE':([12,16,18,19,20,21,23,25,33,36,43,49,50,59,61,64,75,76,77,78,79,80,81,82,83,84,85,86,92,101,],[-27,47,-13,-14,-15,-17,-16,47,47,47,47,-19,47,47,47,47,47,47,-10,-11,-12,-18,47,47,47,47,47,47,47,47,]),'POWER':([12,16,18,19,20,21,23,25,33,36,43,49,50,59,61,64,75,76,77,78,79,80,81,82,83,84,85,86,92,101,],[-27,48,-13,-14,-15,-17,-16,48,48,48,48,-19,48,48,48,48,48,48,48,48,-12,-18,48,48,48,48,48,48,48,48,]),'lt':([12,18,19,20,21,23,25,33,36,49,59,61,64,75,76,77,78,79,80,92,],[-27,-13,-14,-15,-17,-16,52,52,52,-19,52,52,52,-8,-9,-10,-11,-12,-18,52,]),'le':([12,18,19,20,21,23,25,33,36,49,59,61,64,75,76,77,78,79,80,92,],[-27,-13,-14,-15,-17,-16,53,53,53,-19,53,53,53,-8,-9,-10,-11,-12,-18,53,]),'gt':([12,18,19,20,21,23,25,33,36,49,59,61,64,75,76,77,78,79,80,92,],[-27,-13,-14,-15,-17,-16,54,54,54,-19,54,54,54,-8,-9,-10,-11,-12,-18,54,]),'ge':([12,18,19,20,21,23,25,33,36,49,59,61,64,75,76,77,78,79,80,92,],[-27,-13,-14,-15,-17,-16,55,55,55,-19,55,55,55,-8,-9,-10,-11,-12,-18,55,]),'ne':([12,18,19,20,21,23,25,33,36,49,59,61,64,75,76,77,78,79,80,92,],[-27,-13,-14,-15,-17,-16,57,57,57,-19,57,57,57,-8,-9,-10,-11,-12,-18,57,]),'RPAREN':([12,14,15,18,19,20,21,23,36,38,40,42,43,49,50,59,60,66,67,68,75,76,77,78,79,80,81,82,83,84,85,86,87,92,93,94,96,97,99,101,115,],[-27,39,41,-13,-14,-15,-17,-16,-56,70,72,74,-56,-19,80,80,87,95,98,100,-8,-9,-10,-11,-12,-18,-20,-21,-22,-23,-24,-25,-26,80,-58,103,107,109,111,-55,-57,]),'COMMA':([12,18,19,20,21,23,36,38,40,43,49,75,76,77,78,79,80,93,94,97,99,101,115,],[-27,-13,-14,-15,-17,-16,-56,71,71,-56,-19,-8,-9,-10,-11,-12,-18,-58,105,105,105,-55,-57,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,41,72,],[2,73,102,]),'variable':([0,5,6,7,10,13,14,15,17,22,27,29,30,41,44,45,46,47,48,52,53,54,55,56,57,65,66,67,68,71,72,105,],[4,21,24,21,31,21,21,21,21,21,21,21,21,4,21,21,21,21,21,21,21,21,21,21,21,21,93,93,93,21,4,115,]),'expr':([5,7,13,14,15,17,22,27,29,30,44,45,46,47,48,52,53,54,55,56,57,65,71,],[16,25,33,36,43,49,50,59,61,64,75,76,77,78,79,81,82,83,84,85,86,92,101,]),'string':([5,7,13,14,15,17,22,27,29,30,35,44,45,46,47,48,52,53,54,55,56,57,65,71,],[20,20,20,20,20,20,20,20,20,20,69,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'relexpr':([7,13,14,27,29,30,65,],[26,34,37,60,62,63,60,]),'call_args':([14,15,],[38,40,]),'args':([66,67,68,],[94,97,99,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program','_parser.py',16),
  ('program -> error','program',1,'p_program_error','_parser.py',22),
  ('statement -> variable eq expr','statement',3,'p_statement_id','_parser.py',27),
  ('statement -> variable eq relexpr','statement',3,'p_statement_id','_parser.py',28),
  ('statement -> variable eq','statement',2,'p_statement_id_bad','_parser.py',35),
  ('statement -> variable error expr','statement',3,'p_statement_id_bad','_parser.py',36),
  ('statement -> variable error relexpr','statement',3,'p_statement_id_bad','_parser.py',37),
  ('expr -> expr PLUS expr','expr',3,'p_expr_binary','_parser.py',45),
  ('expr -> expr MINUS expr','expr',3,'p_expr_binary','_parser.py',46),
  ('expr -> expr TIMES expr','expr',3,'p_expr_binary','_parser.py',47),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr_binary','_parser.py',48),
  ('expr -> expr POWER expr','expr',3,'p_expr_binary','_parser.py',49),
  ('expr -> INTEGER','expr',1,'p_expr_number','_parser.py',59),
  ('expr -> FLOAT','expr',1,'p_expr_number','_parser.py',60),
  ('expr -> string','expr',1,'p_expr_string','_parser.py',66),
  ('string -> STRING','string',1,'p_string','_parser.py',71),
  ('expr -> variable','expr',1,'p_expr_variable','_parser.py',80),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr_group','_parser.py',85),
  ('expr -> MINUS expr','expr',2,'p_expr_unary','_parser.py',90),
  ('relexpr -> expr lt expr','relexpr',3,'p_relexpr','_parser.py',97),
  ('relexpr -> expr le expr','relexpr',3,'p_relexpr','_parser.py',98),
  ('relexpr -> expr gt expr','relexpr',3,'p_relexpr','_parser.py',99),
  ('relexpr -> expr ge expr','relexpr',3,'p_relexpr','_parser.py',100),
  ('relexpr -> expr eq expr','relexpr',3,'p_relexpr','_parser.py',101),
  ('relexpr -> expr ne expr','relexpr',3,'p_relexpr','_parser.py',102),
  ('relexpr -> LPAREN relexpr RPAREN','relexpr',3,'p_relexpr_group','_parser.py',111),
  ('variable -> ID','variable',1,'p_variable','_parser.py',116),
  ('statement -> print expr','statement',2,'p_statement_print','_parser.py',126),
  ('statement -> input variable','statement',2,'p_statement_input','_parser.py',132),
  ('statement -> variable eq input string','statement',4,'p_statement_input','_parser.py',133),
  ('statement -> input','statement',1,'p_statement_input','_parser.py',134),
  ('statement -> if expr then','statement',3,'p_statement_if','_parser.py',144),
  ('statement -> if relexpr then','statement',3,'p_statement_if','_parser.py',145),
  ('statement -> else then','statement',2,'p_statement_else','_parser.py',149),
  ('statement -> else if expr then','statement',4,'p_statement_elif','_parser.py',154),
  ('statement -> else if relexpr then','statement',4,'p_statement_elif','_parser.py',155),
  ('statement -> repeat until relexpr then','statement',4,'p_statement_repeat','_parser.py',159),
  ('statement -> repeat until expr then','statement',4,'p_statement_repeat','_parser.py',160),
  ('statement -> function variable LPAREN args RPAREN then','statement',6,'p_statement_function','_parser.py',166),
  ('statement -> function variable LPAREN RPAREN then','statement',5,'p_statement_function','_parser.py',167),
  ('statement -> function error LPAREN args RPAREN then','statement',6,'p_statement_function_bad','_parser.py',176),
  ('statement -> function variable error args RPAREN then','statement',6,'p_statement_function_bad','_parser.py',177),
  ('statement -> function variable LPAREN args error then','statement',6,'p_statement_function_bad','_parser.py',178),
  ('statement -> function variable LPAREN error RPAREN then','statement',6,'p_statement_function_bad','_parser.py',179),
  ('statement -> function error LPAREN RPAREN then','statement',5,'p_statement_function_bad','_parser.py',180),
  ('statement -> function variable error RPAREN then','statement',5,'p_statement_function_bad','_parser.py',181),
  ('statement -> function variable LPAREN error then','statement',5,'p_statement_function_bad','_parser.py',182),
  ('statement -> variable LPAREN call_args RPAREN','statement',4,'p_statement_function_call','_parser.py',188),
  ('statement -> variable LPAREN RPAREN','statement',3,'p_statement_function_call','_parser.py',189),
  ('statement -> variable error call_args RPAREN','statement',4,'p_statement_function_call_bad','_parser.py',198),
  ('statement -> variable LPAREN error RPAREN','statement',4,'p_statement_function_call_bad','_parser.py',199),
  ('statement -> variable LPAREN call_args RPAREN statement','statement',5,'p_statement_function_call_bad','_parser.py',200),
  ('statement -> variable LPAREN RPAREN statement','statement',4,'p_statement_function_call_bad','_parser.py',201),
  ('statement -> variable error RPAREN','statement',3,'p_statement_function_call_bad','_parser.py',202),
  ('call_args -> call_args COMMA expr','call_args',3,'p_call_args','_parser.py',209),
  ('call_args -> expr','call_args',1,'p_call_args','_parser.py',210),
  ('args -> args COMMA variable','args',3,'p_args','_parser.py',220),
  ('args -> variable','args',1,'p_args','_parser.py',221),
  ('statement -> end','statement',1,'p_statement_end','_parser.py',230),
]
